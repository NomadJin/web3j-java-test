package com.skcc.mydata.consentmanagement;

import com.skcc.mydata.consentmanagement.config.BlockchainConfig;
import com.skcc.mydata.consentmanagement.contracts.GetterSetter;
import org.springframework.beans.factory.annotation.Autowired;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.*;
import org.web3j.tx.ClientTransactionManager;
import org.web3j.tx.gas.StaticGasProvider;

import javax.annotation.PostConstruct;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.math.BigInteger;

//@Component
public class GetterSetterTest {

    @Autowired
    private BlockchainConfig blockchainConfig;

    @Autowired
    private Web3j web3j;


    public void printAccounts() {
        try {
            List<String> accounts = web3j.ethAccounts().send().getAccounts();
            for( int i = 0; i < accounts.size(); i++ ) {
                System.out.println("account[" + i + "]: " + accounts.get(i));
            }

//            EthAccounts accounts2 = web3j.ethAccounts().sendAsync().get();
//            // accounts.getAccounts();
//            for( int i = 0; i < accounts2.getAccounts().size(); i++ ) {
//                System.out.println("account[" + i + "]: " + accounts2.getAccounts().get(i));
//            }

//            // accounts.getAccounts();
//            for( int i = 0; i < accounts.getAccounts().size(); i++ ) {
//                System.out.println("account[" + i + "]: " + accounts2.getAccounts().get(i));
//            }

            //EthAccounts accounts2 =
            web3j.ethAccounts().sendAsync().thenAccept(accounts3 -> {
                System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@");
                for( int i = 0; i < accounts3.getAccounts().size(); i++ ) {
                    System.out.println("account[" + i + "]: " + accounts3.getAccounts().get(i));
                }

                web3j.shutdown();  // doesn't work, hanging for about 1 min.
            }).exceptionally( account3 -> {
                System.out.println("&&&&&&&&&&&&&&&&&&&&");
                return null;
            });



        } catch (Exception ex) {
            Logger.getLogger(Application.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static GetterSetter getterSetter = null;

    @PostConstruct
    private void init() {

        boolean usingCredentials = false;
        String contractAddress = blockchainConfig.getContractAddress();

        if( usingCredentials ) {
            System.out.println("using org.web3j.crypto.Credentials");
            org.web3j.crypto.Credentials creds = org.web3j.crypto.Credentials.create("0x3BC743663E454FB4FEB768B06D3FAC8952B3E18364AF5611AE4F3F6E1895B570");
            getterSetter = GetterSetter.load(
                    contractAddress,
                    web3j,
                    creds,
                    new StaticGasProvider(BigInteger.ZERO, BigInteger.valueOf(4_500_000))
            );

        } else {
            System.out.println("using ClientTransactionManager  in GetterSetterTest ");
            getterSetter = GetterSetter.load(
                    contractAddress,
                    web3j,
                    //new ClientTransactionManager(web3j, "0x23Ee0Ea812DfE2f85F28AE37a018d102A4ebc770"),  // address generated by metamask
                    new ClientTransactionManager(web3j, "0xb999ad96541f17e9496f2411b71e8248b6834621"),  // address in Wallet
                    new StaticGasProvider(BigInteger.ZERO, BigInteger.valueOf(4_500_000))
            );
        }
    }


    public void getWeb3ClientVersion() throws Exception {
        Web3ClientVersion web3ClientVersion = web3j.web3ClientVersion().sendAsync().get();
        web3j.web3ClientVersion().sendAsync().thenAccept(transactionReceipt -> {
            // then accept gets transaction receipt only if the transaction is successful
        }).exceptionally(transactionReceipt  -> {
            return null;
        });
        System.out.println("[Web3ClientVersion]" + web3ClientVersion.getWeb3ClientVersion());;
    }


    public void myTest() throws Exception {
        // generated address in metamask: 0x23Ee0Ea812DfE2f85F28AE37a018d102A4ebc770
        // private key: 3BC743663E454FB4FEB768B06D3FAC8952B3E18364AF5611AE4F3F6E1895B570

        try {
            System.out.println("[Check 1]" + new Date());
            getterSetter.setNumber(BigInteger.ZERO).send();

            System.out.println("[Check 2]" + new Date());
            String str = getterSetter.getString().send();
            System.out.println("getString(): " + str );
            System.out.println("[Check 3]" + new Date());

        } catch(Exception e) {
            e.printStackTrace();
        }

        System.out.println("END OF GetterSetterTest().sendStringTest()");
    }

    public void testSend() throws Exception {
        // generated address in metamask: 0x23Ee0Ea812DfE2f85F28AE37a018d102A4ebc770
        // private key: 3BC743663E454FB4FEB768B06D3FAC8952B3E18364AF5611AE4F3F6E1895B570

        try {
            getterSetter.setString("Before").send();
            String str = getterSetter.getString().send();
            System.out.println("11. getString(): " + str );  // 결과: Before

            getterSetter.setString("After").send();
            str = getterSetter.getString().send();
            System.out.println("12. getString(): " + str );  // 결과: After

        } catch(Exception e) {
            e.printStackTrace();
        }

        System.out.println("13. END OF GetterSetterTest().testSend(): SYNC");
    }

    public void testSendAsync() throws Exception {
        // generated address in metamask: 0x23Ee0Ea812DfE2f85F28AE37a018d102A4ebc770
        // private key: 3BC743663E454FB4FEB768B06D3FAC8952B3E18364AF5611AE4F3F6E1895B570

        try {
            getterSetter.setString("Before").send();
            String str = getterSetter.getString().send();
            System.out.println("21. getString(): " + str );  // 결과: Before

            getterSetter.setString("After").sendAsync().thenAccept( transactionReceipt -> {
                System.out.println("22. transaction receipt: " + transactionReceipt.getTransactionHash() );

                try {
                    String str2 = getterSetter.getString().send();
                    System.out.println("23. getString(): " + str2);   // 결과: After
                } catch(Exception ignore) { }
            }).exceptionally( transactionReceipt -> {
                System.out.println("ERROR");
                return null;
            });

            str = getterSetter.getString().send();
            System.out.println("24. getString(): " + str );  // 결과: Before

        } catch(Exception e) {
            e.printStackTrace();
        }

        System.out.println("25. END OF GetterSetterTest().testSendAsync()");
    }
}